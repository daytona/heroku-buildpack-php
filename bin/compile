#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

indent() {
  sed -u 's/^/       /'
}

# config
APACHE_VERSION="2.2.22"
APACHE_PATH="apache"
PHP_VERSION="5.3.10"
PHP_PATH="php"

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# INSTALL LIBRARIES AND COMPILE ASSETS
# Code borrowed from: https://github.com/abhishekmunie/heroku-buildpack-static-css
# --------------------------------------------------------------------------------

# CSS Compilation

echo "Depends on lab feature to make Heroku config vars availible during build: https://devcenter.heroku.com/articles/labs-user-env-compile"

echo "-----> Installing SASS..."
if [ ! -d "$PWD/.gem" ]; then
  mkdir $PWD/.gem
fi
gem install sass --no-rdoc --no-ri --install-dir "$PWD/.gem" | indent
export GEM_PATH=$GEM_PATH:$PWD/.gem
echo "       done."

if [ ! -f "${BUILD_DIR}/config.rb" ]; then
	echo "-----> Compiling SASS..."
	$PWD/.gem/bin/sass --update "${BUILD_DIR}/${SASS_PATH}":"${BUILD_DIR}/${CSS_PATH}" --style compressed | indent
	echo "       done."
else
	echo "-----> Installing Compass..."
	gem install compass --no-rdoc --no-ri --install-dir "$PWD/.gem" | indent
	echo "       done."
	echo "-----> Compiling Compass..."
	$PWD/.gem/bin/compass compile ${BUILD_DIR} | indent
	echo "       done."
fi

# JavaScript Compilation

echo "-----> Installing Juicer..."
if [ ! -d "$PWD/.gem" ]; then
  mkdir $PWD/.gem
fi
gem install juicer --no-rdoc --no-ri --install-dir "$PWD/.gem" | indent
export GEM_PATH=$GEM_PATH:$PWD/.gem
echo "       done."

echo "-----> Installing YUI Compressor"
$PWD/.gem/bin/juicer install yui_compressor | indent
echo "       done."

echo "-----> Installing JSLint"
$PWD/.gem/bin/juicer install jslint | indent
echo "       done."

echo "-----> Merging JavaScript..."
for f in $(find ${BUILD_DIR}/${JS_PATH} -type f -maxdepth 1 -name "*.js" ! -name "*.min.js"); do
	$PWD/.gem/bin/juicer merge "$f" -f -s | indent
done
echo "       done."

# Node Installation

NODE_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
NODE_BUILD_DIR=$(mktemp -d -t node_build.XXXXXX)
git clone --quiet https://github.com/heroku/heroku-buildpack-nodejs.git $NODE_BUILDPACK_DIR
mv $LP_DIR/vendor/package.json $NODE_BUILD_DIR/package.json
$NODE_BUILDPACK_DIR/bin/compile $NODE_BUILD_DIR $CACHE_DIR

export PATH=$PATH:$NODE_BUILD_DIR/bin:$NODE_BUILD_DIR/node_modules/.bin

if [[ -n "${SPLIT_FILES}" ]]; then
	echo "-----> Blessing CSS"
	for f in "${SPLIT_FILES}"; do
		NO_END=${f%.*}
		blessc "${BUILD_DIR}/${CSS_PATH}/$f" "${BUILD_DIR}/${CSS_PATH}/${NO_END}.split.css" | indent
	done
	echo "       done."
fi

# COMPILE APP
# Original code from: https://github.com/heroku/heroku-buildpack-php

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

APACHE_URL="https://s3.amazonaws.com/php-lp/apache-$APACHE_VERSION.tar.gz"
echo "-----> Bundling Apache version $APACHE_VERSION"
curl --silent --max-time 60 --location "$APACHE_URL" | tar xz

PHP_URL="https://s3.amazonaws.com/php-lp/php-$PHP_VERSION.tar.gz"
echo "-----> Bundling PHP version $PHP_VERSION"
curl --silent --max-time 60 --location "$PHP_URL" | tar xz

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
cp $LP_DIR/conf/php.ini php

# make php available on bin
mkdir -p bin
ln -s /app/php/bin/php bin/php

cat >>boot.sh <<EOF
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/php/ext
export PHP_INI_SCAN_DIR=/app/www
echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

# clean the cache
rm -rf $CACHE_DIR
