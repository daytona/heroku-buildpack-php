#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

function indent() {
  sed -u 's/^/       /'
}

echo " !     Your application is utilizing Heroku's legacy PHP support."
echo "       For more info, visit: https://devcenter.heroku.com/categories/php"

# Heroku Revision.
#
# Affixed to all vendored binary output to represent changes to the
# compilation environment without a change to the upstream version,
# e.g. PHP 5.3.27 without, and then subsequently with, libmcrypt.
heroku_rev='-2'

# config
MCRYPT_VERSION="2.5.8"
APACHE_VERSION="2.2.25"
APACHE_PATH="apache"
PHP_VERSION="5.3.27"
PHP_PATH="php"

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

export LANG=en_US.UTF-8

# INSTALL LIBRARIES AND COMPILE ASSETS
# Code borrowed from: https://github.com/abhishekmunie/heroku-buildpack-static-css
# --------------------------------------------------------------------------------

# Check for ruby enviroment
if [ -f $BUILD_DIR/Gemfile ]; then
  echo "-----> Installing Gems"
  export GEM_HOME=$BUILD_DIR/.gem/ruby/1.9.1
  PATH="$GEM_HOME/bin:$PATH"
  HOME=$BUILD_DIR gem install bundler --no-rdoc --no-ri
  bundle install --gemfile $BUILD_DIR/Gemfile --path $BUILD_DIR/.gem
fi

# Check for npm w/ Grunt enviroment
if [ -f $BUILD_DIR/package.json ]; then
	echo "-----> Installing Node dependencies"
	NODE_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
	git clone --quiet https://github.com/mbuchetics/heroku-buildpack-nodejs-grunt.git $NODE_BUILDPACK_DIR
	$NODE_BUILDPACK_DIR/bin/compile $BUILD_DIR $CACHE_DIR

	export PATH=$PATH:$BUILD_DIR/bin:$BUILD_DIR/node_modules/.bin

	echo "done." | indent
fi

# Check for custom deploy script
if [ -f $BUILD_DIR/bin/deploy ]; then
	echo "-----> Executing deploy script"

	cd $BUILD_DIR

	./bin/deploy $BUILD_DIR

	echo "done." | indent
fi

# COMPILE APP
# Original code from: https://github.com/heroku/heroku-buildpack-php

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv -- * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

MCRYPT_URL="https://heroku-buildpack-php.s3.amazonaws.com/mcrypt-""$MCRYPT_VERSION""$heroku_rev"".tar.gz"
echo "-----> Bundling mcrypt version $MCRYPT_VERSION"
curl --silent --max-time 60 --location "$MCRYPT_URL" | tar xz

APACHE_URL="https://heroku-buildpack-php.s3.amazonaws.com/apache-""$APACHE_VERSION""$heroku_rev"".tar.gz"
echo "-----> Bundling Apache version $APACHE_VERSION"
curl --silent --max-time 60 --location "$APACHE_URL" | tar xz

PHP_URL="https://heroku-buildpack-php.s3.amazonaws.com/php-$PHP_VERSION""$heroku_rev"".tar.gz"
echo "-----> Bundling PHP version $PHP_VERSION"
curl --silent --max-time 60 --location "$PHP_URL" | tar xz

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
cp $LP_DIR/conf/php.ini php

# make php available on bin
mkdir -p bin
ln -s /app/php/bin/php bin/php

cat >>boot.sh <<EOF
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/php/lib/php
export PHP_INI_SCAN_DIR=/app/www
echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

# clean the cache
rm -rf $CACHE_DIR
